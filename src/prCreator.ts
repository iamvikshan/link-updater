import * as github from '@actions/github'
import * as core from '@actions/core'
import { linkChanges } from './linkProcessor'
import { LinkChange } from './types'

export async function createPullRequest(
  octokit: ReturnType<typeof github.getOctokit>,
  branchName: string
): Promise<void> {
  const { owner, repo } = github.context.repo

  const prTitle = 'ðŸ”— chore: update repository links'
  const prBody = generatePrBody()

  try {
    const response = await octokit.rest.pulls.create({
      owner,
      repo,
      title: prTitle,
      body: prBody,
      head: branchName,
      base: 'main'
    })

    core.info(
      `âœ¨ Created PR #${response.data.number}: ${response.data.html_url}`
    )
  } catch (error) {
    throw new Error(`Failed to create PR: ${error}`)
  }
}

function generatePrBody(): string {
  if (linkChanges.length === 0) {
    return 'No links were changed in this update.'
  }

  // Group changes by file
  const changesByFile = linkChanges.reduce(
    (acc, change) => {
      if (!acc[change.file]) {
        acc[change.file] = []
      }
      acc[change.file].push(change)
      return acc
    },
    {} as Record<string, LinkChange[]>
  )

  let body = '## Link Updates\n\n'

  // Add summary
  body += `This PR updates ${linkChanges.length} link${linkChanges.length === 1 ? '' : 's'} across ${Object.keys(changesByFile).length} file${Object.keys(changesByFile).length === 1 ? '' : 's'}.\n\n`

  // Add details for each file
  for (const [file, changes] of Object.entries(changesByFile)) {
    body += `### ${file}\n`
    for (const change of changes) {
      body += `- \`${change.oldLink}\` â†’ \`${change.newLink}\`\n`
    }
    body += '\n'
  }

  body += '---\n'
  body += '_This PR was automatically generated by the Link Updater._'

  return body
}
